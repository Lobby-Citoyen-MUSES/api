/**
 * Create an invitation to register for a user
 * The process is composed of a hyperlink with the invitation ID associated to an email
 * For security reason the invitation expires after a period
 * 
 * Invoked by AWS SQS (polling) with a batch size 1 to avoid partial failure management
 * For high scalability, this should be revised & implemented.
 * @see https://docs.aws.amazon.com/lambda/latest/dg//with-sqs.html
 */
const aws = require('aws-sdk');
const ddb = new aws.DynamoDB.DocumentClient();
const ses = new aws.SES({ region: 'eu-west-1' });
const oneDay = 86400000;
const emailPattern = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a - zA - Z0 - 9])?(?:\.[a - zA - Z0 - 9](?: [a - zA - Z0 - 9 -]{ 0, 61}[a - zA - Z0 - 9])?)*$/;

exports.handler = async (event, context) => {
    const message = event.Records[0];
    const content = JSON.parse(message.body);

    if (!("email" in content) || !content.email) {
        throw { error: "invalid email", message: message };
    }

    const invitation = {
        id: message.messageId, // free uuid v4 generated by aws sqs at queuing time
        ...content,
        expiresAt: (new Date().getTime()) + oneDay
    };

    await persist(invitation);
    await send(invitation);

    return;
};

async function persist(invitation) {
    return await ddb.put({
        TableName: "invitations",
        ConditionExpression: "attribute_not_exists(id)",
        Item: invitation
    }).promise();
}

async function send(invitation) {
    const email = {
        Source: "Lobby Citoyen MUSES <ludovic.fleury@muses-lobby-citoyen.org>",
        Destination: {
            ToAddresses: [invitation.email]
        },
        Message: {
            Body: {
                Text: {
                    Charset: "UTF-8",
                    Data: "https://muses-lobby-citoyen.org/inscription?invitation=" + invitation.id
                }

            },
            Subject: {
                Charset: "UTF-8",
                Data: "Inscription au lobby citoyen MUSES"
            }
        }
    };


    return await ses.sendEmail(email).promise();
}