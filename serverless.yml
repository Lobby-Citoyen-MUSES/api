service: muses
# app and org for use with dashboard.serverless.com
# app: muses-app
# org: ludofleury

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.secrets.NODE_ENV}
  region: eu-west-3
  endpointType: regional
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
      Resource: ${self:custom.secrets.DDB_ARN}
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
          - dynamodb:DeleteItem
      Resource: ${self:custom.secrets.DDB_ARN_INVITATION}
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource: ${self:custom.secrets.SQS_ARN_INVITATION}
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
  environment:
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    SQS_URL_INVITATION: ${self:custom.secrets.SQS_URL_INVITATION}


functions:
  memberInvitation:
    handler: src/member/invite.handler
    events:
      - sqs:
          arn: arn:aws:sqs:eu-west-3:252490098713:invitation
          batchSize: 1

  memberRegistration:
    handler: src/member/register.handler
    events:
      - http:
          path: /members
          method: post
          cors:
            origin: '*'
          reqValidatorName: "validateBodyAndParameters"
          documentation:
            summary: "Member registration"
            queryParams:
              - type: "string"
                name: "invitation"
                description: "invitation token" 
                required: true
            requestModels:
              "application/json": "MemberRegistration"

  memberAuthentication:
    handler: src/member/authenticate.handler
    events:
      - http:
          path: /auth
          method: post
          cors:
            origin: '*'
          documentation:
            summary: "OAuth password grant"
            queryParams:
              - type: "string"
                name: "grant_type"
                description: "OAuth grant type" 
                required: true
              - type: "string"
                name: "username"
                description: "member identifier" 
                required: true
              - type: "string"
                name: "password"
                description: "member password" 
                required: true

  # stripePayment:
  #   handler: src/payment/succeed.stripePayment
  #   events:
  #     - http: ANY /
  #     - http: ANY /{proxy+}

plugins:
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-webpack

custom:
  secrets: ${file(secrets.json)}
  webpack:
    keepOutputDirectory: true
    includeModules:
      forceExclude:
        - aws-sdk
        # - serverless-aws-documentation
        # - serverless-webpack
        # - webpack
        # - webpack-node-externals
        
  documentation:
    api:
      info:
        version: "1" # see note above about this being ignored
        title: "HTTP API of MUSES citizen lobby"
        contact:
          name: "Ludovic FLEURY"
          url: "https://twitter.com/ludofleury"
          email: "ludovic.fleury@lobby-citoyen-muses.org"
    models:
      -
        name: "MemberRegistration"
        description: "Register a member from an invitation"
        contentType: "application/json"
        schema: ${file(documentation/models/member-registration.v1.json)}
 
# you can overwrite defaults here

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true
  # exclude:
  #  - "**"
  # include:
  #  - src/**
  #  - node_modules/** prod dependencies are managed with lambda layers

# functions:
#   hello:
#     handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    validateBodyAndParameters:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'validateBodyAndParameters'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true
        
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
